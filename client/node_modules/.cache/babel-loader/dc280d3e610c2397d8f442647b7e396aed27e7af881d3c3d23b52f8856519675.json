{"ast":null,"code":"import { ref } from 'vue';\nimport PostComponent from './components/PostComponent.vue';\nimport EmoDialog from './components/EmoDialog.vue';\nimport 'vuetify/dist/vuetify.min.css';\nexport default {\n  name: 'App',\n  components: {\n    PostComponent,\n    EmoDialog\n  }\n};\n\n// props\nconst props = defineProps({\n  isAddOrEdit: String,\n  whichButton: String,\n  taskIndex: Number,\n  addedOrUpdated: String,\n  showTitle: Boolean,\n  tableRows: Array,\n  whichIcon: String\n});\n\n// Define a reactive variable for the visibility of the add task dialog\nconst isAddDialogVisible = ref(true);\n\n// Define emits for emitting events\nconst emits = defineEmits(['add-task', 'no-task', 'update:isAddDialog', 'update:isEditDialog']);\n// Define a ref for tracking form submission\nconst formSubmitted = ref(false);\n\n// check if the title's unique :3\nconst isTitleUnique = ref(true);\n\n// check if there's a description\nconst hasDescription = ref(false);\n\n// check if there's a deadline\nconst hasDeadline = ref(false);\n\n// check if there's a priority\nconst hasPriority = ref(false);\n\n// Define reactive variables for isAddDialog and isEditDialog\nconst isAddDialog = ref(true);\nconst isEditDialog = ref(false);\n\n// Define a reactive object for the new task\nconst newTask = ref({\n  title: '',\n  description: '',\n  deadline: '',\n  priority: ''\n});\nconst uniqueTitle = (newTask, tableRows) => {\n  for (let i = 0; i < tableRows.length; i++) {\n    if (newTask.value.title == tableRows[i].title) {\n      isTitleUnique.value = false;\n      return false;\n    }\n  }\n  isTitleUnique.value = true;\n  return true;\n};\nconst newTaskIsValid = newTask => {\n  if (newTask.value.title.trim() !== '' && newTask.value.description.trim() !== '') {\n    return true;\n  } else return false;\n};\nconst validateDescription = newTask => {\n  if (newTask.value.description.trim() !== '') {\n    hasDescription.value = true;\n    return true;\n  } else {\n    hasDescription.value = false;\n    return false;\n  }\n};\nconst validateDeadline = newTask => {\n  if (newTask.value.deadline.trim() !== '') {\n    hasDeadline.value = true;\n    return true;\n  } else {\n    hasDeadline.value = false;\n    return false;\n  }\n};\nconst validatePriority = newTask => {\n  if (newTask.value.priority.trim() !== '') {\n    hasPriority.value = true;\n    return true;\n  } else {\n    hasPriority.value = false;\n    return false;\n  }\n};\n\n// Method to add a new task\nconst addTask = (index, showTitle, tableRows) => {\n  formSubmitted.value = true;\n\n  // If the form is valid, emit 'add-task' event\n  // If showTitle is false, set the newTask.title to its current title\n  if (!showTitle) {\n    // alert(tableRows[index].title);\n    newTask.value.title = tableRows[index].title;\n\n    // validate entries \n    // update the task accordingly with new values\n\n    if (validateDescription(newTask) && validateDeadline(newTask) && validatePriority(newTask)) {\n      emits('add-task', {\n        title: newTask.value.title,\n        description: newTask.value.description,\n        deadline: newTask.value.deadline,\n        priority: newTask.value.priority\n      });\n      // Clear the new task data\n      newTask.value.title = '';\n      newTask.value.description = '';\n      newTask.value.deadline = '';\n      newTask.value.priority = '';\n      // Close the dialog\n      isAddDialogVisible.value = false;\n      // Reset formSubmitted flag\n      formSubmitted.value = true;\n      showSnackbar('Task updated successfully', 'success');\n    }\n  }\n  // title is shown, go thru add validation\n  else if (showTitle) {\n    if (newTaskIsValid(newTask) && uniqueTitle(newTask, tableRows) && validateDeadline(newTask) && validatePriority(newTask)) {\n      emits('add-task', {\n        title: newTask.value.title,\n        description: newTask.value.description,\n        deadline: newTask.value.deadline,\n        priority: newTask.value.priority\n      });\n      // Clear the new task data\n      newTask.value.title = '';\n      newTask.value.description = '';\n      newTask.value.deadline = '';\n      newTask.value.priority = '';\n      // Close the dialog\n      isAddDialogVisible.value = false;\n      // Reset formSubmitted flag\n      formSubmitted.value = true;\n      showSnackbar('Task added successfully', 'success');\n    }\n  }\n};\n\n// Method to cancel adding a task\nconst cancelAddTask = () => {\n  // Emit 'no-task' event to inform the parent component to close the dialog\n  emits('no-task');\n  formSubmitted.value = false;\n};","map":{"version":3,"names":["ref","PostComponent","EmoDialog","name","components","props","defineProps","isAddOrEdit","String","whichButton","taskIndex","Number","addedOrUpdated","showTitle","Boolean","tableRows","Array","whichIcon","isAddDialogVisible","emits","defineEmits","formSubmitted","isTitleUnique","hasDescription","hasDeadline","hasPriority","isAddDialog","isEditDialog","newTask","title","description","deadline","priority","uniqueTitle","i","length","value","newTaskIsValid","trim","validateDescription","validateDeadline","validatePriority","addTask","index","showSnackbar","cancelAddTask"],"sources":["/Users/ammaaliyu/Documents/GitHub/emo-site/client/src/App.vue"],"sourcesContent":["<template>\n  <v-container> \n    <img alt=\"Vue logo\" src=\"./assets/logo.png\">\n    <PostComponent/>\n    <v-btn prepend-icon=\"mdi-plus\" color=\"primary\"  @click=\"openAddTaskDialog\">\n            Find My Emo-Sona\n          </v-btn>\n    <EmoDialog\n          v-if=\"isAddDialogOpen\"\n          @add-task=\"addTask\"\n          @no-task=\"closeAddTaskDialog\"\n          @close=\"closeAddTaskDialog\"\n          :whichButton = \"whichButton\"\n          :taskIndex = \"taskIndex\"\n          :isAddOrEdit = \"isAddOrEdit\"\n          :isAddDialog= \"isAddDialog\" \n          :isEditDialog=\"isEditDialog\" \n          :showTitle = \"showTitle\"\n          :addedOrUpdated = \"addedOrUpdated\"\n          :tableRows = \"tableRows\"\n          :whichIcon = \"whichIcon\"\n        \n          @update:isAddDialog=\"isAddDialog = $event\" \n          @update:isEditDialog=\"isEditDialog = $event\" \n        />\n</v-container>\n  \n  \n</template>\n\n<script>\nimport { ref } from 'vue';\nimport PostComponent from './components/PostComponent.vue'\nimport EmoDialog from './components/EmoDialog.vue';\nimport 'vuetify/dist/vuetify.min.css';\n\nexport default {\n  name: 'App',\n  components: {\n    PostComponent,\n    EmoDialog\n  }\n}\n\n// props\nconst props = defineProps({\n  isAddOrEdit: String,\n  whichButton: String,\n  taskIndex: Number,\n  addedOrUpdated: String,\n  showTitle: Boolean,\n  tableRows: Array,\n  whichIcon: String\n});\n\n// Define a reactive variable for the visibility of the add task dialog\nconst isAddDialogVisible = ref(true);\n\n// Define emits for emitting events\nconst emits = defineEmits(['add-task', 'no-task', 'update:isAddDialog', 'update:isEditDialog']);\n// Define a ref for tracking form submission\nconst formSubmitted = ref(false);\n\n// check if the title's unique :3\nconst isTitleUnique = ref(true);\n\n// check if there's a description\nconst hasDescription = ref(false);\n\n// check if there's a deadline\nconst hasDeadline = ref(false);\n\n// check if there's a priority\nconst hasPriority = ref(false);\n\n// Define reactive variables for isAddDialog and isEditDialog\nconst isAddDialog = ref(true);\nconst isEditDialog = ref(false);\n\n// Define a reactive object for the new task\nconst newTask = ref({\n  title: '',\n  description: '',\n  deadline: '',\n  priority: '',\n});\n\nconst uniqueTitle = (newTask, tableRows) => {\n  for(let i = 0; i < tableRows.length; i++) {\n    if (newTask.value.title == tableRows[i].title) {\n      \n      isTitleUnique.value = false;\n     \n      return false;\n    }\n  }\n  isTitleUnique.value = true;\n  return true;\n}\n\nconst newTaskIsValid = (newTask) => {\n  if (newTask.value.title.trim() !== '' &&\n    newTask.value.description.trim() !== '' ) {\n      return true;\n    } else\n    \n    return false;\n}\n\nconst validateDescription = (newTask) => {\n  if (newTask.value.description.trim() !== '') {\n    hasDescription.value = true;\n    return true;\n  } else {\n    hasDescription.value = false;\n    return false;\n  }\n}\n\nconst validateDeadline = (newTask) => {\n  if (newTask.value.deadline.trim() !== '') {\n    hasDeadline.value = true;\n    return true;\n  } else {\n    hasDeadline.value = false;\n    return false;\n  }\n}\n\nconst validatePriority = (newTask) => {\n  if (newTask.value.priority.trim() !== '') {\n    hasPriority.value = true;\n    return true;\n  } else {\n    hasPriority.value = false;\n    return false;\n  }\n}\n\n\n// Method to add a new task\nconst addTask = (index, showTitle, tableRows) => {\n  formSubmitted.value = true;\n\n  // If the form is valid, emit 'add-task' event\n    // If showTitle is false, set the newTask.title to its current title\n    if (!showTitle) {\n     // alert(tableRows[index].title);\n      newTask.value.title = tableRows[index].title;\n\n      // validate entries \n      // update the task accordingly with new values\n\n      if (\n        validateDescription(newTask) && \n        validateDeadline(newTask) && \n        validatePriority(newTask)\n        ) {\n      emits('add-task', {\n            title: newTask.value.title,\n            description: newTask.value.description,\n            deadline: newTask.value.deadline,\n            priority: newTask.value.priority,\n          });\n          // Clear the new task data\n          newTask.value.title = '';\n          newTask.value.description = '';\n          newTask.value.deadline = '';\n          newTask.value.priority = '';\n          // Close the dialog\n          isAddDialogVisible.value = false;\n          // Reset formSubmitted flag\n          formSubmitted.value = true;\n\n          showSnackbar('Task updated successfully', 'success');\n        }\n    } \n    // title is shown, go thru add validation\n    else if (showTitle) {\n      if (\n          newTaskIsValid(newTask) && uniqueTitle(newTask, tableRows) \n          && validateDeadline(newTask) && validatePriority(newTask)\n        ) {\n          emits('add-task', {\n            title: newTask.value.title,\n            description: newTask.value.description,\n            deadline: newTask.value.deadline,\n            priority: newTask.value.priority,\n          });\n          // Clear the new task data\n          newTask.value.title = '';\n          newTask.value.description = '';\n          newTask.value.deadline = '';\n          newTask.value.priority = '';\n          // Close the dialog\n          isAddDialogVisible.value = false;\n          // Reset formSubmitted flag\n          formSubmitted.value = true;\n          \n          showSnackbar('Task added successfully', 'success');\n\n        } \n    }\n  \n};\n\n// Method to cancel adding a task\nconst cancelAddTask = () => {\n  // Emit 'no-task' event to inform the parent component to close the dialog\n  emits('no-task');\n  formSubmitted.value = false;\n};\n\n\n\n\n\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}