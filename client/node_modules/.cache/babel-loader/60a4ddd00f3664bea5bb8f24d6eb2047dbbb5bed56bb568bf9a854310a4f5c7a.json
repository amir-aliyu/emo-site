{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport PostComponent from './components/PostComponent.vue';\nimport EmoDialog from './components/EmoDialog.vue';\nimport 'vuetify/dist/vuetify.min.css';\nexport default {\n  name: 'App',\n  components: {\n    PostComponent,\n    EmoDialog\n  }\n};\n\n// Define ref for isAddDialogOpen\nconst isAddDialogOpen = ref(false);\n\n// const to check wether its an add or edit\nconst isAddOrEdit = ref(\"Add Task default\");\n\n// reference for which button it is\nconst whichButton = ref(\"Add\");\nconst taskIndex = ref(0);\n\n// Define whether it's an add or edit dialog\nconst isEditDialog = ref(true);\nconst isAddDialog = ref(true);\n\n// determine whether or not to add title\nconst showTitle = ref(true);\n\n// say it was added or updated successfully\nconst addedOrUpdated = ref(\"added\");\n\n// Define your table rows data\nconst tableRows = ref([]);\nconst whichIcon = ref(\"mdi-plus\");\n\n// open task dialog, pass in whether it's an add task and index\nconst openAddTaskDialog = (isAdd, index) => {\n  isAddDialogOpen.value = true;\n  if (isAdd) {\n    showTitle.value = true;\n    whichButton.value = \"Add\";\n    addedOrUpdated.value = \"added\";\n    isAddOrEdit.value = \"Add Task\";\n    taskIndex.value = -1;\n    whichIcon.value = \"mdi-plus\";\n  } else {\n    showTitle.value = false;\n    whichButton.value = \"Edit\";\n    addedOrUpdated.value = \"edited\";\n    isAddOrEdit.value = \"Edit Task\";\n    taskIndex.value = index;\n    whichIcon.value = \"mdi mdi-update\";\n  }\n};\n\n// Method to close the add task dialog\nconst closeAddTaskDialog = () => {\n  isAddDialogOpen.value = false;\n};\n\n// Method to handle adding task\nconst addTask = (task, index) => {\n  //taskIndex.value = index;\n  isAddOrEdit.value = \"Add Task from app.vue\";\n  isAddDialog.value = true;\n  isEditDialog.value = false;\n  if (taskIndex.value < 0) {\n    tableRows.value.push(task);\n  } else {\n    tableRows.value[taskIndex.value] = task;\n  }\n  closeAddTaskDialog();\n  if (whichButton.value == \"Add\") {\n    showSnackbar('Task added successfully', 'success');\n  } else {\n    showSnackbar('Task updated successfully', 'success');\n  }\n};\nconst deleteTask = index => {\n  tableRows.value.splice(index, 1);\n  showSnackbar('Task deleted successfully', 'success');\n};\n\n// Method to update task completion\nconst updateCompletion = index => {\n  // Toggle the completion status of the task at the specified index\n  tableRows.value[index].isComplete = !tableRows.value[index].isComplete;\n\n  // Toggle the showUpdateButton property based on the updated completion status\n  tableRows.value[index].showUpdateButton = !tableRows.value[index].isComplete;\n};","map":{"version":3,"names":["PostComponent","EmoDialog","name","components","isAddDialogOpen","ref","isAddOrEdit","whichButton","taskIndex","isEditDialog","isAddDialog","showTitle","addedOrUpdated","tableRows","whichIcon","openAddTaskDialog","isAdd","index","value","closeAddTaskDialog","addTask","task","push","showSnackbar","deleteTask","splice","updateCompletion","isComplete","showUpdateButton"],"sources":["/Users/ammaaliyu/Documents/GitHub/emo-site/client/src/App.vue"],"sourcesContent":["<template>\n  <v-container> \n    <img alt=\"Vue logo\" src=\"./assets/logo.png\">\n    <PostComponent/>\n    <v-btn prepend-icon=\"mdi-plus\" color=\"primary\"  @click=\"openAddTaskDialog\">\n            Find My Emo-Sona\n          </v-btn>\n    <EmoDialog\n          v-if=\"isAddDialogOpen\"\n          @add-task=\"addTask\"\n          @no-task=\"closeAddTaskDialog\"\n          @close=\"closeAddTaskDialog\"\n          :whichButton = \"whichButton\"\n          :taskIndex = \"taskIndex\"\n          :isAddOrEdit = \"isAddOrEdit\"\n          :isAddDialog= \"isAddDialog\" \n          :isEditDialog=\"isEditDialog\" \n          :showTitle = \"showTitle\"\n          :addedOrUpdated = \"addedOrUpdated\"\n          :tableRows = \"tableRows\"\n          :whichIcon = \"whichIcon\"\n        \n          @update:isAddDialog=\"isAddDialog = $event\" \n          @update:isEditDialog=\"isEditDialog = $event\" \n        />\n</v-container>\n  \n  \n</template>\n\n<script>\nimport PostComponent from './components/PostComponent.vue'\nimport EmoDialog from './components/EmoDialog.vue';\nimport 'vuetify/dist/vuetify.min.css';\n\nexport default {\n  name: 'App',\n  components: {\n    PostComponent,\n    EmoDialog\n  }\n}\n\n// Define ref for isAddDialogOpen\nconst isAddDialogOpen = ref(false);\n\n// const to check wether its an add or edit\nconst isAddOrEdit = ref(\"Add Task default\");\n\n// reference for which button it is\nconst whichButton = ref(\"Add\");\n\nconst taskIndex = ref(0);\n\n// Define whether it's an add or edit dialog\nconst isEditDialog = ref(true);\n\nconst isAddDialog = ref(true);\n\n// determine whether or not to add title\nconst showTitle = ref(true);\n\n// say it was added or updated successfully\nconst addedOrUpdated = ref(\"added\");\n\n// Define your table rows data\nconst tableRows = ref([]);\n\nconst whichIcon = ref(\"mdi-plus\");\n\n// open task dialog, pass in whether it's an add task and index\nconst openAddTaskDialog = (isAdd, index) => {\n  isAddDialogOpen.value = true;\n  if(isAdd) {\n    showTitle.value = true;\n    whichButton.value = \"Add\";\n    addedOrUpdated.value = \"added\";\n    isAddOrEdit.value = \"Add Task\";\n    taskIndex.value = -1;\n    whichIcon.value = \"mdi-plus\";\n  } else {\n    showTitle.value = false;\n    whichButton.value = \"Edit\";\n    addedOrUpdated.value = \"edited\";\n    isAddOrEdit.value = \"Edit Task\";\n    taskIndex.value = index;\n    whichIcon.value = \"mdi mdi-update\";\n   \n  }\n \n};\n\n// Method to close the add task dialog\nconst closeAddTaskDialog = () => {\n  isAddDialogOpen.value = false;\n};\n\n// Method to handle adding task\nconst addTask = (task, index) => {\n  //taskIndex.value = index;\n  isAddOrEdit.value = \"Add Task from app.vue\";\n  isAddDialog.value = true; \n  isEditDialog.value = false; \n  if(taskIndex.value < 0) {\n    tableRows.value.push(task);\n  } else {\n    tableRows.value[taskIndex.value] = task;\n  }\n  \n  closeAddTaskDialog();\n  if (whichButton.value == \"Add\") {\n    showSnackbar('Task added successfully', 'success');\n  } else {\n    showSnackbar('Task updated successfully', 'success');\n  }\n  \n};\n\nconst deleteTask = (index) => {\n  tableRows.value.splice(index, 1);\n  showSnackbar('Task deleted successfully', 'success');\n\n};\n\n// Method to update task completion\nconst updateCompletion = (index) => {\n  // Toggle the completion status of the task at the specified index\n  tableRows.value[index].isComplete = !tableRows.value[index].isComplete;\n\n  // Toggle the showUpdateButton property based on the updated completion status\n  tableRows.value[index].showUpdateButton = !tableRows.value[index].isComplete;\n\n};\n\n\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}