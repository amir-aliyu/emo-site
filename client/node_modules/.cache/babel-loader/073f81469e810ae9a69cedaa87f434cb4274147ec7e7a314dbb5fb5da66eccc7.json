{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, createTextVNode as _createTextVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nimport _imports_0 from './assets/logo.png';\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"img\", {\n  alt: \"Vue logo\",\n  src: _imports_0\n}, null, -1 /* HOISTED */);\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_PostComponent = _resolveComponent(\"PostComponent\");\n  const _component_v_btn = _resolveComponent(\"v-btn\");\n  const _component_EmoDialog = _resolveComponent(\"EmoDialog\");\n  const _component_v_container = _resolveComponent(\"v-container\");\n  return _openBlock(), _createBlock(_component_v_container, null, {\n    default: _withCtx(() => [_hoisted_1, _createVNode(_component_PostComponent), _createVNode(_component_v_btn, {\n      \"prepend-icon\": \"mdi-plus\",\n      color: \"primary\",\n      onClick: _ctx.openAddTaskDialog\n    }, {\n      default: _withCtx(() => [_createTextVNode(\" Find My Emo-Sona \")]),\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"onClick\"]), _ctx.isAddDialogOpen ? (_openBlock(), _createBlock(_component_EmoDialog, {\n      key: 0,\n      onAddTask: _ctx.addTask,\n      onNoTask: _ctx.closeAddTaskDialog,\n      onClose: _ctx.closeAddTaskDialog,\n      whichButton: _ctx.whichButton,\n      taskIndex: _ctx.taskIndex,\n      isAddOrEdit: _ctx.isAddOrEdit,\n      isAddDialog: _ctx.isAddDialog,\n      isEditDialog: _ctx.isEditDialog,\n      showTitle: _ctx.showTitle,\n      addedOrUpdated: _ctx.addedOrUpdated,\n      tableRows: _ctx.tableRows,\n      whichIcon: _ctx.whichIcon,\n      \"onUpdate:isAddDialog\": _cache[0] || (_cache[0] = $event => _ctx.isAddDialog = $event),\n      \"onUpdate:isEditDialog\": _cache[1] || (_cache[1] = $event => _ctx.isEditDialog = $event)\n    }, null, 8 /* PROPS */, [\"onAddTask\", \"onNoTask\", \"onClose\", \"whichButton\", \"taskIndex\", \"isAddOrEdit\", \"isAddDialog\", \"isEditDialog\", \"showTitle\", \"addedOrUpdated\", \"tableRows\", \"whichIcon\"])) : _createCommentVNode(\"v-if\", true)]),\n    _: 1 /* STABLE */\n  });\n}","map":{"version":3,"names":["_imports_0","_createElementVNode","alt","src","_createBlock","_component_v_container","default","_withCtx","_hoisted_1","_createVNode","_component_PostComponent","_component_v_btn","color","onClick","_ctx","openAddTaskDialog","_createTextVNode","_","isAddDialogOpen","_component_EmoDialog","key","onAddTask","addTask","onNoTask","closeAddTaskDialog","onClose","whichButton","taskIndex","isAddOrEdit","isAddDialog","isEditDialog","showTitle","addedOrUpdated","tableRows","whichIcon","_cache","$event","_createCommentVNode"],"sources":["/Users/ammaaliyu/Documents/GitHub/emo-site/client/src/App.vue"],"sourcesContent":["<template>\n  <v-container> \n    <img alt=\"Vue logo\" src=\"./assets/logo.png\">\n    <PostComponent/>\n    <v-btn prepend-icon=\"mdi-plus\" color=\"primary\"  @click=\"openAddTaskDialog\">\n            Find My Emo-Sona\n          </v-btn>\n    <EmoDialog\n          v-if=\"isAddDialogOpen\"\n          @add-task=\"addTask\"\n          @no-task=\"closeAddTaskDialog\"\n          @close=\"closeAddTaskDialog\"\n          :whichButton = \"whichButton\"\n          :taskIndex = \"taskIndex\"\n          :isAddOrEdit = \"isAddOrEdit\"\n          :isAddDialog= \"isAddDialog\" \n          :isEditDialog=\"isEditDialog\" \n          :showTitle = \"showTitle\"\n          :addedOrUpdated = \"addedOrUpdated\"\n          :tableRows = \"tableRows\"\n          :whichIcon = \"whichIcon\"\n        \n          @update:isAddDialog=\"isAddDialog = $event\" \n          @update:isEditDialog=\"isEditDialog = $event\" \n        />\n</v-container>\n  \n  \n</template>\n\n<script>\nimport { ref } from 'vue';\nimport PostComponent from './components/PostComponent.vue'\nimport EmoDialog from './components/EmoDialog.vue';\nimport 'vuetify/dist/vuetify.min.css';\n\nexport default {\n  name: 'App',\n  components: {\n    PostComponent,\n    EmoDialog\n  }\n}\n\n// Define ref for isAddDialogOpen\nconst isAddDialogOpen = ref(false);\n\n// const to check wether its an add or edit\nconst isAddOrEdit = ref(\"Add Task default\");\n\n// reference for which button it is\nconst whichButton = ref(\"Add\");\n\nconst taskIndex = ref(0);\n\n// Define whether it's an add or edit dialog\nconst isEditDialog = ref(true);\n\nconst isAddDialog = ref(true);\n\n// determine whether or not to add title\nconst showTitle = ref(true);\n\n// say it was added or updated successfully\nconst addedOrUpdated = ref(\"added\");\n\n// Define your table rows data\nconst tableRows = ref([]);\n\nconst whichIcon = ref(\"mdi-plus\");\n\n// open task dialog, pass in whether it's an add task and index\nconst openAddTaskDialog = (isAdd, index) => {\n  isAddDialogOpen.value = true;\n \n};\n\n// Method to close the add task dialog\nconst closeAddTaskDialog = () => {\n  isAddDialogOpen.value = false;\n};\n\n// Method to handle adding task\nconst addTask = (task, index) => {\n  //taskIndex.value = index;\n  isAddOrEdit.value = \"Add Task from app.vue\";\n  isAddDialog.value = true; \n  isEditDialog.value = false; \n  if(taskIndex.value < 0) {\n    tableRows.value.push(task);\n  } else {\n    tableRows.value[taskIndex.value] = task;\n  }\n  \n  closeAddTaskDialog();\n  if (whichButton.value == \"Add\") {\n    showSnackbar('Task added successfully', 'success');\n  } else {\n    showSnackbar('Task updated successfully', 'success');\n  }\n  \n};\n\nconst deleteTask = (index) => {\n  tableRows.value.splice(index, 1);\n  showSnackbar('Task deleted successfully', 'success');\n\n};\n\n// Method to update task completion\nconst updateCompletion = (index) => {\n  // Toggle the completion status of the task at the specified index\n  tableRows.value[index].isComplete = !tableRows.value[index].isComplete;\n\n  // Toggle the showUpdateButton property based on the updated completion status\n  tableRows.value[index].showUpdateButton = !tableRows.value[index].isComplete;\n\n};\n\n\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n"],"mappings":";OAEwBA,UAAuB;gCAA3CC,mBAAA,CAA4C;EAAvCC,GAAG,EAAC,UAAU;EAACC,GAAuB,EAAvBH;;;;;;;uBADtBI,YAAA,CAwBYC,sBAAA;IAzBdC,OAAA,EAAAC,QAAA,CAEI,MAA4C,CAA5CC,UAA4C,EAC5CC,YAAA,CAAgBC,wBAAA,GAChBD,YAAA,CAEcE,gBAAA;MAFP,cAAY,EAAC,UAAU;MAACC,KAAK,EAAC,SAAS;MAAGC,OAAK,EAAEC,IAAA,CAAAC;;MAJ5DT,OAAA,EAAAC,QAAA,CAI+E,MAErE,CANVS,gBAAA,CAI+E,oBAErE,E;MANVC,CAAA;oCAQgBH,IAAA,CAAAI,eAAe,I,cAD3Bd,YAAA,CAiBMe,oBAAA;MAxBVC,GAAA;MASWC,SAAQ,EAAEP,IAAA,CAAAQ,OAAO;MACjBC,QAAO,EAAET,IAAA,CAAAU,kBAAkB;MAC3BC,OAAK,EAAEX,IAAA,CAAAU,kBAAkB;MACzBE,WAAW,EAAIZ,IAAA,CAAAY,WAAW;MAC1BC,SAAS,EAAIb,IAAA,CAAAa,SAAS;MACtBC,WAAW,EAAId,IAAA,CAAAc,WAAW;MAC1BC,WAAW,EAAGf,IAAA,CAAAe,WAAW;MACzBC,YAAY,EAAEhB,IAAA,CAAAgB,YAAY;MAC1BC,SAAS,EAAIjB,IAAA,CAAAiB,SAAS;MACtBC,cAAc,EAAIlB,IAAA,CAAAkB,cAAc;MAChCC,SAAS,EAAInB,IAAA,CAAAmB,SAAS;MACtBC,SAAS,EAAIpB,IAAA,CAAAoB,SAAS;MAEtB,sBAAkB,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEtB,IAAA,CAAAe,WAAW,GAAGO,MAAM;MACxC,uBAAmB,EAAAD,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEtB,IAAA,CAAAgB,YAAY,GAAGM,MAAM;wMAvBrDC,mBAAA,e;IAAApB,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}