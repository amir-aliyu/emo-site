{"ast":null,"code":"import { ref } from 'vue';\n\n// props\n\nexport default {\n  __name: 'EmoDialog',\n  props: {\n    isAddOrEdit: String,\n    whichButton: String,\n    taskIndex: Number,\n    addedOrUpdated: String,\n    showTitle: Boolean,\n    tableRows: Array,\n    whichIcon: String\n  },\n  emits: ['add-task', 'no-task', 'update:isAddDialog', 'update:isEditDialog'],\n  setup(__props, {\n    expose: __expose,\n    emit: __emit\n  }) {\n    __expose();\n    const props = __props;\n\n    // Define a reactive variable for the visibility of the add task dialog\n    const isAddDialogVisible = ref(true);\n\n    // Define emits for emitting events\n    const emits = __emit;\n    // Define a ref for tracking form submission\n    const formSubmitted = ref(false);\n\n    // check if the title's unique :3\n    const isTitleUnique = ref(true);\n\n    // check if there's a description\n    const hasDescription = ref(false);\n\n    // check if there's a deadline\n    const hasDeadline = ref(false);\n\n    // check if there's a priority\n    const hasPriority = ref(false);\n\n    // Define reactive variables for isAddDialog and isEditDialog\n    const isAddDialog = ref(true);\n    const isEditDialog = ref(false);\n\n    // Define a reactive object for the new task\n    const newTask = ref({\n      title: '',\n      description: '',\n      deadline: '',\n      priority: ''\n    });\n    const uniqueTitle = (newTask, tableRows) => {\n      for (let i = 0; i < tableRows.length; i++) {\n        if (newTask.value.title == tableRows[i].title) {\n          isTitleUnique.value = false;\n          return false;\n        }\n      }\n      isTitleUnique.value = true;\n      return true;\n    };\n    const newTaskIsValid = newTask => {\n      if (newTask.value.title.trim() !== '' && newTask.value.description.trim() !== '') {\n        return true;\n      } else return false;\n    };\n    const validateDescription = newTask => {\n      if (newTask.value.description.trim() !== '') {\n        hasDescription.value = true;\n        return true;\n      } else {\n        hasDescription.value = false;\n        return false;\n      }\n    };\n    const validateDeadline = newTask => {\n      if (newTask.value.deadline.trim() !== '') {\n        hasDeadline.value = true;\n        return true;\n      } else {\n        hasDeadline.value = false;\n        return false;\n      }\n    };\n    const validatePriority = newTask => {\n      if (newTask.value.priority.trim() !== '') {\n        hasPriority.value = true;\n        return true;\n      } else {\n        hasPriority.value = false;\n        return false;\n      }\n    };\n\n    // Method to add a new task\n    const addTask = (index, showTitle, tableRows) => {\n      formSubmitted.value = true;\n\n      // If the form is valid, emit 'add-task' event\n      // If showTitle is false, set the newTask.title to its current title\n      if (!showTitle) {\n        // alert(tableRows[index].title);\n        newTask.value.title = tableRows[index].title;\n\n        // validate entries \n        // update the task accordingly with new values\n\n        if (validateDescription(newTask) && validateDeadline(newTask) && validatePriority(newTask)) {\n          emits('add-task', {\n            title: newTask.value.title,\n            description: newTask.value.description,\n            deadline: newTask.value.deadline,\n            priority: newTask.value.priority\n          });\n          // Clear the new task data\n          newTask.value.title = '';\n          newTask.value.description = '';\n          newTask.value.deadline = '';\n          newTask.value.priority = '';\n          // Close the dialog\n          isAddDialogVisible.value = false;\n          // Reset formSubmitted flag\n          formSubmitted.value = true;\n          showSnackbar('Task updated successfully', 'success');\n        }\n      }\n      // title is shown, go thru add validation\n      else if (showTitle) {\n        if (newTaskIsValid(newTask) && uniqueTitle(newTask, tableRows) && validateDeadline(newTask) && validatePriority(newTask)) {\n          emits('add-task', {\n            title: newTask.value.title,\n            description: newTask.value.description,\n            deadline: newTask.value.deadline,\n            priority: newTask.value.priority\n          });\n          // Clear the new task data\n          newTask.value.title = '';\n          newTask.value.description = '';\n          newTask.value.deadline = '';\n          newTask.value.priority = '';\n          // Close the dialog\n          isAddDialogVisible.value = false;\n          // Reset formSubmitted flag\n          formSubmitted.value = true;\n          showSnackbar('Task added successfully', 'success');\n        }\n      }\n    };\n\n    // Method to cancel adding a task\n    const cancelAddTask = () => {\n      // Emit 'no-task' event to inform the parent component to close the dialog\n      emits('no-task');\n      formSubmitted.value = false;\n    };\n    const __returned__ = {\n      props,\n      isAddDialogVisible,\n      emits,\n      formSubmitted,\n      isTitleUnique,\n      hasDescription,\n      hasDeadline,\n      hasPriority,\n      isAddDialog,\n      isEditDialog,\n      newTask,\n      uniqueTitle,\n      newTaskIsValid,\n      validateDescription,\n      validateDeadline,\n      validatePriority,\n      addTask,\n      cancelAddTask,\n      ref\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","props","__props","isAddDialogVisible","emits","__emit","formSubmitted","isTitleUnique","hasDescription","hasDeadline","hasPriority","isAddDialog","isEditDialog","newTask","title","description","deadline","priority","uniqueTitle","tableRows","i","length","value","newTaskIsValid","trim","validateDescription","validateDeadline","validatePriority","addTask","index","showTitle","showSnackbar","cancelAddTask"],"sources":["/Users/ammaaliyu/Documents/GitHub/emo-site/client/src/components/EmoDialog.vue"],"sourcesContent":["<template>\n    <v-dialog v-model=\"isAddDialogVisible\" max-width=\"500px\" persistent>\n     \n      <v-card>\n        <v-container>\n          <v-banner :icon =\"whichIcon\" id=\"taskBanner\" bg-color=\"primary\" lines=\"one\">\n              <div id=\"taskText\">{{ isAddOrEdit }}</div> </v-banner>\n        <v-card-text >\n          <v-form @submit.prevent=\"addTask\">\n             <v-text-field\n              v-show=\"showTitle\"\n              v-model=\"newTask.title\"\n              label=\"Title\"\n              :rules=\"[() => !!newTask.title.trim() || 'Title is required', () => isTitleUnique.value || 'Title must be unique']\"\n            ></v-text-field>\n        \n            <!-- do not display title if it is not add -->\n            <v-textarea\n              v-model=\"newTask.description\"\n              label=\"Description\"\n              :rules=\"[() => !!newTask.description.trim() || 'Description is required']\"\n            ></v-textarea>\n           \n            <v-text-field\n            v-show=\"isAddDialog\" \n              v-model=\"newTask.deadline\"\n              label=\"Deadline\"\n              :rules=\"[() => !!newTask.deadline.trim() || 'Deadline is required']\"\n              type=\"date\"\n            ></v-text-field>\n  \n            <v-radio-group v-model=\"newTask.priority\" row\n            :rules=\"[() => !!newTask.priority.trim() || 'Priority is required']\">\n              <v-radio value=\"High\" label=\"High\"></v-radio>\n              <v-radio value=\"Medium\" label=\"Medium\"></v-radio>\n              <v-radio value=\"Low\" label=\"Low\"></v-radio>\n            </v-radio-group>\n   \n            <v-btn id=\"right-btn\" :prepend-icon=\"whichIcon\" type=\"submit\" color=\"primary\" @click=\"addTask(taskIndex, showTitle,tableRows)\">\n              {{ whichButton }}</v-btn\n            >\n             <!-- Cancel button -->\n            <v-btn id=\"cancel\" color=\"red\" prepend-icon=\"mdi mdi-close-circle-outline\" @click=\"cancelAddTask\">Cancel</v-btn>\n          </v-form>\n        </v-card-text>\n      </v-container>\n      </v-card>\n    \n    </v-dialog>\n  </template>\n  \n  <script setup>\n  import { ref, defineEmits, defineProps } from 'vue';\n  \n  // props\n  const props = defineProps({\n    isAddOrEdit: String,\n    whichButton: String,\n    taskIndex: Number,\n    addedOrUpdated: String,\n    showTitle: Boolean,\n    tableRows: Array,\n    whichIcon: String\n  });\n  \n  // Define a reactive variable for the visibility of the add task dialog\n  const isAddDialogVisible = ref(true);\n  \n  // Define emits for emitting events\n  const emits = defineEmits(['add-task', 'no-task', 'update:isAddDialog', 'update:isEditDialog']);\n  // Define a ref for tracking form submission\n  const formSubmitted = ref(false);\n  \n  // check if the title's unique :3\n  const isTitleUnique = ref(true);\n  \n  // check if there's a description\n  const hasDescription = ref(false);\n  \n  // check if there's a deadline\n  const hasDeadline = ref(false);\n  \n  // check if there's a priority\n  const hasPriority = ref(false);\n  \n  // Define reactive variables for isAddDialog and isEditDialog\n  const isAddDialog = ref(true);\n  const isEditDialog = ref(false);\n  \n  // Define a reactive object for the new task\n  const newTask = ref({\n    title: '',\n    description: '',\n    deadline: '',\n    priority: '',\n  });\n  \n  const uniqueTitle = (newTask, tableRows) => {\n    for(let i = 0; i < tableRows.length; i++) {\n      if (newTask.value.title == tableRows[i].title) {\n        \n        isTitleUnique.value = false;\n       \n        return false;\n      }\n    }\n    isTitleUnique.value = true;\n    return true;\n  }\n  \n  const newTaskIsValid = (newTask) => {\n    if (newTask.value.title.trim() !== '' &&\n      newTask.value.description.trim() !== '' ) {\n        return true;\n      } else\n      \n      return false;\n  }\n  \n  const validateDescription = (newTask) => {\n    if (newTask.value.description.trim() !== '') {\n      hasDescription.value = true;\n      return true;\n    } else {\n      hasDescription.value = false;\n      return false;\n    }\n  }\n  \n  const validateDeadline = (newTask) => {\n    if (newTask.value.deadline.trim() !== '') {\n      hasDeadline.value = true;\n      return true;\n    } else {\n      hasDeadline.value = false;\n      return false;\n    }\n  }\n  \n  const validatePriority = (newTask) => {\n    if (newTask.value.priority.trim() !== '') {\n      hasPriority.value = true;\n      return true;\n    } else {\n      hasPriority.value = false;\n      return false;\n    }\n  }\n  \n  \n  // Method to add a new task\n  const addTask = (index, showTitle, tableRows) => {\n    formSubmitted.value = true;\n  \n    // If the form is valid, emit 'add-task' event\n      // If showTitle is false, set the newTask.title to its current title\n      if (!showTitle) {\n       // alert(tableRows[index].title);\n        newTask.value.title = tableRows[index].title;\n  \n        // validate entries \n        // update the task accordingly with new values\n  \n        if (\n          validateDescription(newTask) && \n          validateDeadline(newTask) && \n          validatePriority(newTask)\n          ) {\n        emits('add-task', {\n              title: newTask.value.title,\n              description: newTask.value.description,\n              deadline: newTask.value.deadline,\n              priority: newTask.value.priority,\n            });\n            // Clear the new task data\n            newTask.value.title = '';\n            newTask.value.description = '';\n            newTask.value.deadline = '';\n            newTask.value.priority = '';\n            // Close the dialog\n            isAddDialogVisible.value = false;\n            // Reset formSubmitted flag\n            formSubmitted.value = true;\n  \n            showSnackbar('Task updated successfully', 'success');\n          }\n      } \n      // title is shown, go thru add validation\n      else if (showTitle) {\n        if (\n            newTaskIsValid(newTask) && uniqueTitle(newTask, tableRows) \n            && validateDeadline(newTask) && validatePriority(newTask)\n          ) {\n            emits('add-task', {\n              title: newTask.value.title,\n              description: newTask.value.description,\n              deadline: newTask.value.deadline,\n              priority: newTask.value.priority,\n            });\n            // Clear the new task data\n            newTask.value.title = '';\n            newTask.value.description = '';\n            newTask.value.deadline = '';\n            newTask.value.priority = '';\n            // Close the dialog\n            isAddDialogVisible.value = false;\n            // Reset formSubmitted flag\n            formSubmitted.value = true;\n            \n            showSnackbar('Task added successfully', 'success');\n  \n          } \n      }\n    \n  };\n  \n  // Method to cancel adding a task\n  const cancelAddTask = () => {\n    // Emit 'no-task' event to inform the parent component to close the dialog\n    emits('no-task');\n    formSubmitted.value = false;\n  };\n  \n  </script>\n  \n  <style>\n  .error-input .v-text-field__details {\n    color: red; /* Error message color */\n  }\n  \n  .error-input .v-input__control {\n    border-color: red; /* Border color for input */\n  }\n  \n  /* Regular textarea fields */\n  .v-textarea__slot textarea {\n    border: 1px solid #ccc !important; /* Regular border color */\n    border-radius: 4px !important; /* Regular border radius */\n    padding: 8px 12px !important; /* Regular padding */\n    font-size: 16px !important; /* Regular font size */\n  }\n  #taskBanner {\n    font-size: 25px;\n   \n  }\n  #taskText {\n    font-size: 25px;\n    margin-left: 1em;\n    margin-right:5em;\n  }\n  #right-btn {\n    margin-left: 8em;\n  \n  }\n  #cancel {\n    margin-left: 1em;\n    margin-right:1em;\n  }\n  \n  </style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}